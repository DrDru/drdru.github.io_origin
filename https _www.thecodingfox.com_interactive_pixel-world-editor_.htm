<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"><meta name="viewport" content="width=device-width"><title>https://www.thecodingfox.com/interactive/pixel-world-editor/</title><link rel="stylesheet" type="text/css" href="resource://content-accessible/viewsource.css"></head><body id="viewsource" class="highlight" style="tab-size: 4"><pre id="line1"><span></span><span class="doctype">&lt;!DOCTYPE html&gt;</span><span>
<span id="line2"></span></span><span>&lt;<span class="start-tag">html</span>&gt;</span><span>
<span id="line3"></span></span><span>&lt;<span class="start-tag">head</span>&gt;</span><span>
<span id="line4"></span>  </span><span>&lt;<span class="start-tag">title</span>&gt;</span><span>Pixel World Editor</span><span>&lt;/<span class="end-tag">title</span>&gt;</span><span>
<span id="line5"></span>  </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">description</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Draw worlds out of pixel art sprites.</a>"&gt;</span><span>
<span id="line6"></span>  </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">og:title</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Pixel World Editor</a>"&gt;</span><span>
<span id="line7"></span>  </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">og:description</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Draw worlds out of pixel art sprites.</a>"&gt;</span><span>
<span id="line8"></span></span><span>&lt;<span class="start-tag">style</span>&gt;</span><span>
<span id="line9"></span>a:link { color: #66C; }
<span id="line10"></span>a:visited { color: #C9D; }
<span id="line11"></span>
<span id="line12"></span>/* Forms */
<span id="line13"></span>.fields, .actions {
<span id="line14"></span>  padding: 8px;
<span id="line15"></span>}
<span id="line16"></span>label.wrap {
<span id="line17"></span>  display: block;
<span id="line18"></span>  margin: 0 0 1em;
<span id="line19"></span>}
<span id="line20"></span>textarea, input, select {
<span id="line21"></span>  background: #444;
<span id="line22"></span>  border: 1px solid #999;
<span id="line23"></span>  font:inherit;
<span id="line24"></span>  color: inherit;
<span id="line25"></span>}
<span id="line26"></span>textarea {
<span id="line27"></span>  border-radius: 4px;
<span id="line28"></span>}
<span id="line29"></span>button, .button {
<span id="line30"></span>  background: #444;
<span id="line31"></span>  color: inherit;
<span id="line32"></span>  border: 1px solid #000;
<span id="line33"></span>  border-radius: 8px;
<span id="line34"></span>  padding: 8px;
<span id="line35"></span>  font: inherit;
<span id="line36"></span>  transition: background-color 0.4s;
<span id="line37"></span>  -webkit-appearance: none;
<span id="line38"></span>  appearance: none;
<span id="line39"></span>  cursor: pointer;
<span id="line40"></span>}
<span id="line41"></span>button:hover, .button:hover {
<span id="line42"></span>  background: #666;
<span id="line43"></span>}
<span id="line44"></span>button:active, .button:active {
<span id="line45"></span>  transition: none;
<span id="line46"></span>  background: #3399FF;
<span id="line47"></span>}
<span id="line48"></span>.error {
<span id="line49"></span>  color: #F88;
<span id="line50"></span>}
<span id="line51"></span>
<span id="line52"></span>/* Modal */
<span id="line53"></span>.modal {
<span id="line54"></span>  position: absolute;
<span id="line55"></span>  top: 20%;
<span id="line56"></span>  left: 20%;
<span id="line57"></span>  width: 60%;
<span id="line58"></span>  background: #333;
<span id="line59"></span>  border: 1px solid #000;
<span id="line60"></span>  border-radius: 16px;
<span id="line61"></span>  padding: 16px;
<span id="line62"></span>  box-shadow: 6px 6px 10px #000;
<span id="line63"></span>  resize: both;
<span id="line64"></span>  overflow: auto;
<span id="line65"></span>}
<span id="line66"></span>.modal .close {
<span id="line67"></span>  display: inline-block;
<span id="line68"></span>  float: right;
<span id="line69"></span>  width: 32px;
<span id="line70"></span>  height: 32px;
<span id="line71"></span>  line-height: 32px;
<span id="line72"></span>  text-align: center;
<span id="line73"></span>  padding: 0;
<span id="line74"></span>}
<span id="line75"></span>.modal header {
<span id="line76"></span>  font-weight: 700;
<span id="line77"></span>  border-radius: 15px 15px 0 0;
<span id="line78"></span>  background: #444;
<span id="line79"></span>  margin: -16px -16px 0;
<span id="line80"></span>  padding: 8px 16px;
<span id="line81"></span>}
<span id="line82"></span>.modal .body {
<span id="line83"></span>  padding-top: 16px;
<span id="line84"></span>}
<span id="line85"></span>.modal textarea {
<span id="line86"></span>  width: 100%;
<span id="line87"></span>  height: 140px;
<span id="line88"></span>}
<span id="line89"></span>.modal .actions {
<span id="line90"></span>  text-align: right;
<span id="line91"></span>}
<span id="line92"></span>
<span id="line93"></span>/* Page layout and content */
<span id="line94"></span>html,body {
<span id="line95"></span>  margin:0;
<span id="line96"></span>  padding:0;
<span id="line97"></span>  color: #FFF;
<span id="line98"></span>  font-size: 16px;
<span id="line99"></span>  font-family: Tahoma, sans-serif;
<span id="line100"></span>}
<span id="line101"></span>main {
<span id="line102"></span>  display: flex;
<span id="line103"></span>  width: 100vw;
<span id="line104"></span>  height: 100vh;
<span id="line105"></span>  align-items: stretch;
<span id="line106"></span>}
<span id="line107"></span>.sidebar {
<span id="line108"></span>  flex: 0 0 auto;
<span id="line109"></span>  background: #333;
<span id="line110"></span>}
<span id="line111"></span>#left-sidebar {
<span id="line112"></span>  height: 100%;
<span id="line113"></span>  width: 320px;
<span id="line114"></span>}
<span id="line115"></span>#world-area {
<span id="line116"></span>  flex: 1 1 auto;
<span id="line117"></span>  background: #222;
<span id="line118"></span>}
<span id="line119"></span>#world-area.grid {
<span id="line120"></span>  background-image:
<span id="line121"></span>    linear-gradient(to right, #555 0%, #555 1px, transparent 2px),
<span id="line122"></span>    linear-gradient(to bottom, #555 0%, #555 1px, transparent 2px);
<span id="line123"></span>  background-position: top left, top left;
<span id="line124"></span>  background-size: 10px 10px;
<span id="line125"></span>}
<span id="line126"></span>#right-sidebar {
<span id="line127"></span>  height: 100%;
<span id="line128"></span>  width: 320px;
<span id="line129"></span>}
<span id="line130"></span>#world {
<span id="line131"></span>  display: block;
<span id="line132"></span>  width: 100%;
<span id="line133"></span>  height: 100%;
<span id="line134"></span>  border: 0;
<span id="line135"></span>  padding: 0;
<span id="line136"></span>  margin: 0;
<span id="line137"></span>}
<span id="line138"></span>.sidebar section h3 {
<span id="line139"></span>  background: #444;
<span id="line140"></span>  padding: 8px 16px;
<span id="line141"></span>  margin: 0;
<span id="line142"></span>  font: inherit;
<span id="line143"></span>  font-weight: 700;
<span id="line144"></span>}
<span id="line145"></span>
<span id="line146"></span>#sprite-list,
<span id="line147"></span>#layers {
<span id="line148"></span>  background: #222;
<span id="line149"></span>  text-align: center;
<span id="line150"></span>  overflow: auto;
<span id="line151"></span>  padding: 8px 8px 0;
<span id="line152"></span>  margin: 8px;
<span id="line153"></span>  border: 1px solid #999;
<span id="line154"></span>}
<span id="line155"></span>.layer {
<span id="line156"></span>  display: flex;
<span id="line157"></span>  background: #444;
<span id="line158"></span>  border: 1px solid #000;
<span id="line159"></span>  padding: 4px;
<span id="line160"></span>  margin: 0 0 8px;
<span id="line161"></span>  align-items: center;
<span id="line162"></span>  transition: background 0.25s;
<span id="line163"></span>  position: relative;
<span id="line164"></span>}
<span id="line165"></span>.layer:hover {
<span id="line166"></span>  background: #0D2842;
<span id="line167"></span>}
<span id="line168"></span>.layer.active {
<span id="line169"></span>  border: 1px solid #3399FF;
<span id="line170"></span>}
<span id="line171"></span>.layer .field {
<span id="line172"></span>  height: 24px;
<span id="line173"></span>  background: #222;
<span id="line174"></span>  border: 1px solid #999;
<span id="line175"></span>  flex: 1 1 auto;
<span id="line176"></span>  width: 100%;
<span id="line177"></span>  display: none;
<span id="line178"></span>}
<span id="line179"></span>.layer .select {
<span id="line180"></span>  border-radius: 10px;
<span id="line181"></span>  flex: 1 1 auto;
<span id="line182"></span>  line-height: 24px;
<span id="line183"></span>  padding: 8px;
<span id="line184"></span>  transition: background 0.25s;
<span id="line185"></span>  cursor: pointer;
<span id="line186"></span>  text-align: left;
<span id="line187"></span>}
<span id="line188"></span>.layer .rename,
<span id="line189"></span>.layer .delete {
<span id="line190"></span>  width: 32px;
<span id="line191"></span>  height: 32px;
<span id="line192"></span>  line-height: 32px;
<span id="line193"></span>  margin-left: 8px;
<span id="line194"></span>  padding: 0;
<span id="line195"></span>  border: 0;
<span id="line196"></span>  text-align: center;
<span id="line197"></span>  flex: 0 0 auto;
<span id="line198"></span>  color: #FFF;
<span id="line199"></span>  font-weight: bold;
<span id="line200"></span>  font-size: 1.25em;
<span id="line201"></span>}
<span id="line202"></span>#layers[data-count="1"] .delete {
<span id="line203"></span>  display: none;
<span id="line204"></span>}
<span id="line205"></span>.layer .delete:hover {
<span id="line206"></span>  background: #803333;
<span id="line207"></span>}
<span id="line208"></span>.layer.edit .select {
<span id="line209"></span>  display: none;
<span id="line210"></span>}
<span id="line211"></span>.layer.edit .field {
<span id="line212"></span>  display: block;
<span id="line213"></span>}
<span id="line214"></span>.placeholder-layer {
<span id="line215"></span>  height: 32px;
<span id="line216"></span>  position: relative;
<span id="line217"></span>}
<span id="line218"></span>.layer.show-drop::before,
<span id="line219"></span>.placeholder-layer.show-drop::before {
<span id="line220"></span>  content: "";
<span id="line221"></span>  width: 100%;
<span id="line222"></span>  height: 8px;
<span id="line223"></span>  position: absolute;
<span id="line224"></span>  top: -6px;
<span id="line225"></span>  left: 0;
<span id="line226"></span>  background: #3399FF;
<span id="line227"></span>  border-radius: 4px;
<span id="line228"></span>}
<span id="line229"></span>#sprite-list {
<span id="line230"></span>  padding: 8px;
<span id="line231"></span>  text-align: left;
<span id="line232"></span>}
<span id="line233"></span>#sprite-list canvas,
<span id="line234"></span>.no-sprite {
<span id="line235"></span>  display: inline-block;
<span id="line236"></span>  vertical-align: middle;
<span id="line237"></span>  margin-bottom: 8px;
<span id="line238"></span>  image-rendering: pixelated;
<span id="line239"></span>  border: 2px solid transparent;
<span id="line240"></span>  transition: border 0.25s;
<span id="line241"></span>  cursor: pointer;
<span id="line242"></span>  height: 80px;
<span id="line243"></span>  width: auto;
<span id="line244"></span>  text-align: center;
<span id="line245"></span>}
<span id="line246"></span>.no-sprite {
<span id="line247"></span>  width: 80px;
<span id="line248"></span>  line-height: 80px;
<span id="line249"></span>  background: #333;
<span id="line250"></span>}
<span id="line251"></span>.no-sprite span {
<span id="line252"></span>  display: inline-block;
<span id="line253"></span>  line-height: 1.142857;
<span id="line254"></span>  vertical-align: middle;
<span id="line255"></span>}
<span id="line256"></span>.no-sprite:hover,
<span id="line257"></span>#sprite-list canvas:hover {
<span id="line258"></span>  border-color: #555;
<span id="line259"></span>}
<span id="line260"></span>.no-sprite.selected,
<span id="line261"></span>#sprite-list canvas.selected {
<span id="line262"></span>  border-color: #3399FF;
<span id="line263"></span>}
<span id="line264"></span>#export {
<span id="line265"></span>  background: #3377DD;
<span id="line266"></span>  transition: background 0.25s;
<span id="line267"></span>}
<span id="line268"></span>#export:hover {
<span id="line269"></span>  background: #3399FF;
<span id="line270"></span>}
<span id="line271"></span>.help-locator {
<span id="line272"></span>  position: relative;
<span id="line273"></span>  width: 128px;
<span id="line274"></span>  height: 0;
<span id="line275"></span>}
<span id="line276"></span>.help {
<span id="line277"></span>  position: absolute;
<span id="line278"></span>  top: 12px;
<span id="line279"></span>  right: 0;
<span id="line280"></span>  background: #444;
<span id="line281"></span>  border: 1px solid #999;
<span id="line282"></span>  padding: 12px 20px;
<span id="line283"></span>  border-radius: 16px;
<span id="line284"></span>  box-shadow: 0 0 12px #FFF;
<span id="line285"></span>  width: 400px;
<span id="line286"></span>}
<span id="line287"></span>.help::before, .help::after {
<span id="line288"></span>  content: "";
<span id="line289"></span>  display: block;
<span id="line290"></span>  position: absolute;
<span id="line291"></span>  width: 0;
<span id="line292"></span>  height: 0;
<span id="line293"></span>  border-style: solid;
<span id="line294"></span>  right: 48px;
<span id="line295"></span>  
<span id="line296"></span>  top: -11px;
<span id="line297"></span>  border-color: transparent transparent #999 transparent;
<span id="line298"></span>  border-width: 0 11px 11px;
<span id="line299"></span>}
<span id="line300"></span>.help::after {
<span id="line301"></span>  top: -10px;
<span id="line302"></span>  border-color: transparent transparent #444 transparent;
<span id="line303"></span>  border-width: 0 11px 11px;
<span id="line304"></span>}
<span id="line305"></span>.help p {
<span id="line306"></span>  margin: 0;
<span id="line307"></span>}
<span id="line308"></span>.help .dismiss {
<span id="line309"></span>  font-family: Arial,Helvetica,sans-serif;
<span id="line310"></span>  font-weight: bold;
<span id="line311"></span>  color: #39F;
<span id="line312"></span>  text-decoration: underline;
<span id="line313"></span>  float: right;
<span id="line314"></span>  cursor: pointer;
<span id="line315"></span>}
<span id="line316"></span>.tool-info {
<span id="line317"></span>  padding: 8px;
<span id="line318"></span>  font-size: 0.875em;
<span id="line319"></span>  font-family: Arial,Helvetica,sans-serif;
<span id="line320"></span>}
<span id="line321"></span>.tool-info p {
<span id="line322"></span>  margin: 0;
<span id="line323"></span>}
<span id="line324"></span>
<span id="line325"></span></span><span>&lt;/<span class="end-tag">style</span>&gt;</span><span>
<span id="line326"></span></span><span>&lt;/<span class="end-tag">head</span>&gt;</span><span>
<span id="line327"></span></span><span>&lt;<span class="start-tag">body</span>&gt;</span><span>
<span id="line328"></span>  </span><span>&lt;<span class="start-tag">main</span>&gt;</span><span>
<span id="line329"></span>    </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">left-sidebar</a>" <span class="attribute-name">class</span>="<a class="attribute-value">sidebar</a>"&gt;</span><span>
<span id="line330"></span>      </span><span>&lt;<span class="start-tag">section</span> <span class="attribute-name">class</span>="<a class="attribute-value">file</a>"&gt;</span><span>
<span id="line331"></span>        </span><span>&lt;<span class="start-tag">h3</span>&gt;</span><span>File</span><span>&lt;/<span class="end-tag">h3</span>&gt;</span><span>
<span id="line332"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">actions</a>"&gt;</span><span>
<span id="line333"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">save</a>"&gt;</span><span>Save workspace...</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line334"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">load</a>"&gt;</span><span>Load workspace...</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line335"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">export</a>"&gt;</span><span>Export as HTML...</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line336"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line337"></span>      </span><span>&lt;/<span class="end-tag">section</span>&gt;</span><span>
<span id="line338"></span>      </span><span>&lt;<span class="start-tag">section</span> <span class="attribute-name">class</span>="<a class="attribute-value">world</a>"&gt;</span><span>
<span id="line339"></span>        </span><span>&lt;<span class="start-tag">h3</span>&gt;</span><span>World</span><span>&lt;/<span class="end-tag">h3</span>&gt;</span><span>
<span id="line340"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">fields</a>"&gt;</span><span>
<span id="line341"></span>          </span><span>&lt;<span class="start-tag">label</span> <span class="attribute-name">class</span>="<a class="attribute-value">wrap</a>"&gt;</span><span>
<span id="line342"></span>            Background:
<span id="line343"></span>            </span><span>&lt;<span class="start-tag">input</span> <span class="attribute-name">type</span>="<a class="attribute-value">color</a>" <span class="attribute-name">id</span>="<a class="attribute-value">background-color</a>" <span class="attribute-name">value</span>="<a class="attribute-value">#222</a>"&gt;</span><span>
<span id="line344"></span>          </span><span>&lt;/<span class="end-tag">label</span>&gt;</span><span>
<span id="line345"></span>          </span><span>&lt;<span class="start-tag">label</span> <span class="attribute-name">class</span>="<a class="attribute-value">wrap</a>"&gt;</span><span>
<span id="line346"></span>            </span><span>&lt;<span class="start-tag">input</span> <span class="attribute-name">type</span>="<a class="attribute-value">checkbox</a>" <span class="attribute-name">id</span>="<a class="attribute-value">show-grid</a>" <span class="attribute-name">checked</span>&gt;</span><span>
<span id="line347"></span>            Show grid
<span id="line348"></span>          </span><span>&lt;/<span class="end-tag">label</span>&gt;</span><span>
<span id="line349"></span>          </span><span>&lt;<span class="start-tag">label</span> <span class="attribute-name">class</span>="<a class="attribute-value">wrap</a>"&gt;</span><span>
<span id="line350"></span>            Pixel size:
<span id="line351"></span>            </span><span>&lt;<span class="start-tag">input</span> <span class="attribute-name">type</span>="<a class="attribute-value">number</a>" <span class="attribute-name">min</span>="<a class="attribute-value">1</a>" <span class="attribute-name">step</span>="<a class="attribute-value">1</a>" <span class="attribute-name">value</span>="<a class="attribute-value">10</a>" <span class="attribute-name">id</span>="<a class="attribute-value">pixel-size</a>"&gt;</span><span>px
<span id="line352"></span>          </span><span>&lt;/<span class="end-tag">label</span>&gt;</span><span>
<span id="line353"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line354"></span>      </span><span>&lt;/<span class="end-tag">section</span>&gt;</span><span>
<span id="line355"></span>
<span id="line356"></span>      </span><span>&lt;<span class="start-tag">section</span> <span class="attribute-name">class</span>="<a class="attribute-value">layers</a>"&gt;</span><span>
<span id="line357"></span>        </span><span>&lt;<span class="start-tag">h3</span>&gt;</span><span>Layers</span><span>&lt;/<span class="end-tag">h3</span>&gt;</span><span>
<span id="line358"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">actions</a>"&gt;</span><span>
<span id="line359"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">add-layer</a>"&gt;</span><span> + New layer</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line360"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line361"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">layers</a>"&gt;</span><span>
<span id="line362"></span>          </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">placeholder-layer</a>"&gt;</span><span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line363"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line364"></span>      </span><span>&lt;/<span class="end-tag">section</span>&gt;</span><span>
<span id="line365"></span>
<span id="line366"></span>    </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line367"></span>
<span id="line368"></span>    </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">world-area</a>" <span class="attribute-name">class</span>="<a class="attribute-value">grid</a>"&gt;</span><span>
<span id="line369"></span>    </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line370"></span>
<span id="line371"></span>    </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">right-sidebar</a>" <span class="attribute-name">class</span>="<a class="attribute-value">sidebar</a>"&gt;</span><span>
<span id="line372"></span>      </span><span>&lt;<span class="start-tag">section</span> <span class="attribute-name">class</span>="<a class="attribute-value">library</a>"&gt;</span><span>
<span id="line373"></span>        </span><span>&lt;<span class="start-tag">h3</span>&gt;</span><span>Library</span><span>&lt;/<span class="end-tag">h3</span>&gt;</span><span>
<span id="line374"></span>
<span id="line375"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">tools</a>"&gt;</span><span>
<span id="line376"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line377"></span>
<span id="line378"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">import actions</a>"&gt;</span><span>
<span id="line379"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">open-import-window</a>"&gt;</span><span>Import pixel art...</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line380"></span>          </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">help-locator</a>"&gt;</span><span>
<span id="line381"></span>            </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">help</a>"&gt;</span><span>
<span id="line382"></span>              </span><span>&lt;<span class="start-tag">p</span>&gt;</span><span>
<span id="line383"></span>                This is an experimental editor, so I haven't built a pixel art creator.
<span id="line384"></span>                For now, you can import
<span id="line385"></span>                pixel art made with </span><span>&lt;<span class="start-tag">a</span> <span class="attribute-name">target</span>="<a class="attribute-value">_blank</a>" <span class="attribute-name">href</span>="<a class="attribute-value" href="view-source:https://www.pixelartcss.com/">https://www.pixelartcss.com/</a>"&gt;</span><span>https://www.pixelartcss.com/</span><span>&lt;/<span class="end-tag">a</span>&gt;</span><span>
<span id="line386"></span>                using this button.
<span id="line387"></span>              </span><span>&lt;/<span class="end-tag">p</span>&gt;</span><span>
<span id="line388"></span>              </span><span>&lt;<span class="start-tag">span</span> <span class="attribute-name">class</span>="<a class="attribute-value">dismiss</a>"&gt;</span><span>DISMISS</span><span>&lt;/<span class="end-tag">span</span>&gt;</span><span>
<span id="line389"></span>            </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line390"></span>            </span><span>&lt;<span class="start-tag">script</span>&gt;</span><span>
<span id="line391"></span>            document.querySelector(".help").addEventListener(
<span id="line392"></span>              "click",
<span id="line393"></span>              e =&gt; {
<span id="line394"></span>                if(e.target.nodeName.toLowerCase()!="a") e.currentTarget.remove();
<span id="line395"></span>              }
<span id="line396"></span>            );
<span id="line397"></span>            </span><span>&lt;/<span class="end-tag">script</span>&gt;</span><span>
<span id="line398"></span>          </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line399"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line400"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">tool-info</a>"&gt;</span><span>
<span id="line401"></span>          </span><span>&lt;<span class="start-tag">p</span>&gt;</span><span>Click on one of the imported sprites listed below to begin placing copies in the world.</span><span>&lt;/<span class="end-tag">p</span>&gt;</span><span>
<span id="line402"></span>          </span><span>&lt;<span class="start-tag">p</span>&gt;</span><span>Select "Move placed sprites" to drag existing sprites around.</span><span>&lt;/<span class="end-tag">p</span>&gt;</span><span>
<span id="line403"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line404"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">sprite-list</a>"&gt;</span><span>
<span id="line405"></span>          </span><span>&lt;<span class="start-tag">a</span> <span class="attribute-name">class</span>="<a class="attribute-value">no-sprite selected</a>"&gt;</span><span></span><span>&lt;<span class="start-tag">span</span>&gt;</span><span>Move placed sprites</span><span>&lt;/<span class="end-tag">span</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">a</span>&gt;</span><span>
<span id="line406"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line407"></span>      </span><span>&lt;/<span class="end-tag">section</span>&gt;</span><span>
<span id="line408"></span>    </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line409"></span>
<span id="line410"></span>    </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">import-modal</a>" <span class="attribute-name">class</span>="<a class="attribute-value">modal</a>" <span class="attribute-name">style</span>="<a class="attribute-value">display:none</a>"&gt;</span><span>
<span id="line411"></span>      </span><span>&lt;<span class="start-tag">header</span>&gt;</span><span>
<span id="line412"></span>        Import
<span id="line413"></span>        </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">class</span>="<a class="attribute-value">close</a>"&gt;</span><span><span class="entity"><span>&amp;</span>times;</span></span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line414"></span>      </span><span>&lt;/<span class="end-tag">header</span>&gt;</span><span>
<span id="line415"></span>      </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">body</a>"&gt;</span><span>
<span id="line416"></span>        </span><span>&lt;<span class="start-tag">label</span> <span class="attribute-name">for</span>="<a class="attribute-value">pixelart-css-code</a>"&gt;</span><span>Create pixel art at </span><span>&lt;<span class="start-tag">a</span> <span class="attribute-name">target</span>="<a class="attribute-value">blank</a>" <span class="attribute-name">href</span>="<a class="attribute-value" href="view-source:https://www.pixelartcss.com/">https://www.pixelartcss.com/</a>"&gt;</span><span>https://www.pixelartcss.com/</span><span>&lt;/<span class="end-tag">a</span>&gt;</span><span> and paste the generated CSS here</span><span>&lt;/<span class="end-tag">label</span>&gt;</span><span>
<span id="line417"></span>        </span><span>&lt;<span class="start-tag">textarea</span> <span class="attribute-name">id</span>="<a class="attribute-value">pixelart-css-code</a>"&gt;</span><span></span><span>&lt;/<span class="end-tag">textarea</span>&gt;</span><span>
<span id="line418"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">import-errors</a>" <span class="attribute-name">class</span>="<a class="attribute-value">error</a>" <span class="attribute-name">style</span>="<a class="attribute-value">display: none</a>"&gt;</span><span>
<span id="line419"></span>          </span><span>&lt;<span class="start-tag">p</span>&gt;</span><span>Unable to parse the CSS. The following errors were found:</span><span>&lt;/<span class="end-tag">p</span>&gt;</span><span>
<span id="line420"></span>          </span><span>&lt;<span class="start-tag">ul</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">ul</span>&gt;</span><span>
<span id="line421"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line422"></span>        </span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">actions</a>"&gt;</span><span>
<span id="line423"></span>          </span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">import-pixelart</a>"&gt;</span><span>Import</span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line424"></span>        </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line425"></span>      </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line426"></span>    </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line427"></span>
<span id="line428"></span>  </span><span>&lt;/<span class="end-tag">main</span>&gt;</span><span>
<span id="line429"></span></span><span>&lt;<span class="start-tag">script</span> <span class="attribute-name">id</span>="<a class="attribute-value">internal-stylesheet</a>" <span class="attribute-name">type</span>="<a class="attribute-value">text/css</a>"&gt;</span><span>
<span id="line430"></span>html,body {
<span id="line431"></span>  margin: 0; padding: 0;
<span id="line432"></span>  min-height: 100vh;
<span id="line433"></span>  min-width: 100vw;
<span id="line434"></span>}
<span id="line435"></span>.layer {
<span id="line436"></span>  position: absolute;
<span id="line437"></span>  top: 0;
<span id="line438"></span>  left: 0;
<span id="line439"></span>}
<span id="line440"></span>.s, #placeholder {
<span id="line441"></span>  position: absolute;
<span id="line442"></span>}
<span id="line443"></span>.s::before {
<span id="line444"></span>  content: "";
<span id="line445"></span>  display: block;
<span id="line446"></span>  position: absolute;
<span id="line447"></span>  top: 100%;
<span id="line448"></span>  left: 100%;
<span id="line449"></span>}
<span id="line450"></span>.edit .s:hover::before {
<span id="line451"></span>  border: 2px solid #3399FF;
<span id="line452"></span>}
<span id="line453"></span></span><span>&lt;/<span class="end-tag">script</span>&gt;</span><span>
<span id="line454"></span></span><span>&lt;<span class="start-tag">script</span>&gt;</span><span>
<span id="line455"></span>/**
<span id="line456"></span> * Represents data for a unique sprite.
<span id="line457"></span> */
<span id="line458"></span>class Sprite {
<span id="line459"></span>  constructor(w, h) {
<span id="line460"></span>    this.id = -1;
<span id="line461"></span>    this.width = w;
<span id="line462"></span>    this.height = h;
<span id="line463"></span>    this.data = new Uint8ClampedArray(w*h*4);
<span id="line464"></span>  }
<span id="line465"></span>}
<span id="line466"></span>
<span id="line467"></span>class SpriteInstance {
<span id="line468"></span>  static counter = 0;
<span id="line469"></span>  constructor(sprite, x, y) {
<span id="line470"></span>    this.id = SpriteInstance.counter++;
<span id="line471"></span>    this.sprite = sprite;
<span id="line472"></span>    this.x = x;
<span id="line473"></span>    this.y = y;
<span id="line474"></span>  }
<span id="line475"></span>}
<span id="line476"></span>
<span id="line477"></span>/**
<span id="line478"></span> * Converts between sprites and CSS.
<span id="line479"></span> */
<span id="line480"></span>class CSSInterface {
<span id="line481"></span>
<span id="line482"></span>  /* Get sprites from user CSS input */
<span id="line483"></span>  getSpritesFromCSS(css, errors) {
<span id="line484"></span>    let style = document.createElement("style");
<span id="line485"></span>    style.innerHTML = css;
<span id="line486"></span>    style.media = "none";
<span id="line487"></span>    document.head.appendChild(style);
<span id="line488"></span>    let rules = style.sheet.cssRules;
<span id="line489"></span>    let sprites = [];
<span id="line490"></span>    for(let i = 0; i </span><span>&lt; </span><span>rules.length; i++) {
<span id="line491"></span>      let rule = rules[i];
<span id="line492"></span>      let errList = [];
<span id="line493"></span>      if(rule.constructor.name !== "CSSStyleRule") {
<span id="line494"></span>        continue;
<span id="line495"></span>      }
<span id="line496"></span>      if(rule.style["animation"]) {
<span id="line497"></span>        errList.push("Animated sprites are not yet supported.");
<span id="line498"></span>      }
<span id="line499"></span>      if(!rule.style["width"]) {
<span id="line500"></span>        errList.push("Missing width property");
<span id="line501"></span>      }
<span id="line502"></span>      if(!rule.style["height"]) {
<span id="line503"></span>        errList.push("Missing height property");
<span id="line504"></span>      }
<span id="line505"></span>      if(!rule.style["box-shadow"]) {
<span id="line506"></span>        errList.push("Missing box-shadow property");
<span id="line507"></span>      }
<span id="line508"></span>      if(errList.length == 0) {
<span id="line509"></span>        try {
<span id="line510"></span>          sprites.push(this.generateSprite(rule));
<span id="line511"></span>        } catch(e) {
<span id="line512"></span>          errList.push(e);
<span id="line513"></span>          errors[rule.selectorText] = errList;
<span id="line514"></span>        }
<span id="line515"></span>      } else {
<span id="line516"></span>        errors[rule.selectorText] = errList;
<span id="line517"></span>      }
<span id="line518"></span>    }
<span id="line519"></span>    return sprites;
<span id="line520"></span>  }
<span id="line521"></span>
<span id="line522"></span>  /* Generate CSS for a sprite */
<span id="line523"></span>  getCSSFromSprite(sprite, size) {
<span id="line524"></span>    let data = sprite.data;
<span id="line525"></span>    let len = data.length;
<span id="line526"></span>    let css = "";
<span id="line527"></span>    let selector = ".s" + String(sprite.id);
<span id="line528"></span>
<span id="line529"></span>    css += selector + " {\n";
<span id="line530"></span>    css += "width:" + String(size) + "px;\n";
<span id="line531"></span>    css += "height:" + String(size) + "px;\n";
<span id="line532"></span>    css += "box-shadow: ";
<span id="line533"></span>
<span id="line534"></span>    for(let i = 0; i </span><span>&lt; </span><span>len; ) {
<span id="line535"></span>      if(i &gt; 0) css += ", ";
<span id="line536"></span>      let k = i/4;
<span id="line537"></span>      let r = data[i]; i++;
<span id="line538"></span>      let g = data[i]; i++;
<span id="line539"></span>      let b = data[i]; i++;
<span id="line540"></span>      let a = data[i] / 255; i++;
<span id="line541"></span>      let x = size * (1 + k % sprite.width);
<span id="line542"></span>      let y = size * (1 + Math.floor(k / sprite.width));
<span id="line543"></span>      css += `rgba(${r}, ${g}, ${b}, ${a.toFixed(2)}) ${x}px ${y}px`;
<span id="line544"></span>    }
<span id="line545"></span>    css += ";\n";
<span id="line546"></span>
<span id="line547"></span>    css += "}\n";
<span id="line548"></span>    css += selector + "::before {\n";
<span id="line549"></span>    css += "width:" + String(sprite.width * size) + "px;\n";
<span id="line550"></span>    css += "height:" + String(sprite.height * size) + "px;\n";
<span id="line551"></span>    css += "}";
<span id="line552"></span>    return css;
<span id="line553"></span>  }
<span id="line554"></span>
<span id="line555"></span>  /* Create a sprite from a valid CSS rule object */
<span id="line556"></span>  generateSprite(rule) {
<span id="line557"></span>    let w = parseInt(rule.style["width"]);
<span id="line558"></span>    let h = parseInt(rule.style["height"]);
<span id="line559"></span>    let cssData = rule.style["box-shadow"];
<span id="line560"></span>    let unit = rule.style["width"].replace(/\d/g, "");
<span id="line561"></span>    let parser = new ShadowParser(cssData, unit);
<span id="line562"></span>    let pixel = null;
<span id="line563"></span>    let cw = 0, ch = 0;
<span id="line564"></span>
<span id="line565"></span>    // One run to get the sprite dimensions
<span id="line566"></span>    while( pixel = parser.getNext()) {
<span id="line567"></span>      let x = pixel.x / w;
<span id="line568"></span>      let y = pixel.y / h;
<span id="line569"></span>      if(x &gt;= cw) cw = x;
<span id="line570"></span>      if(y &gt; ch) ch = y;
<span id="line571"></span>    }
<span id="line572"></span>
<span id="line573"></span>    // One run to store the pixels in the sprite
<span id="line574"></span>    let sprite = new Sprite(cw, ch);
<span id="line575"></span>    parser.reset();
<span id="line576"></span>    while( pixel = parser.getNext()) {
<span id="line577"></span>      let x = -1 + pixel.x / w;
<span id="line578"></span>      let y = -1 + pixel.y / h;
<span id="line579"></span>      let color = pixel.color;
<span id="line580"></span>      let pos = 4 * (y * cw + x);
<span id="line581"></span>      sprite.data[pos  ] = color[0];
<span id="line582"></span>      sprite.data[pos+1] = color[1];
<span id="line583"></span>      sprite.data[pos+2] = color[2];
<span id="line584"></span>      sprite.data[pos+3] = color[3];
<span id="line585"></span>    }
<span id="line586"></span>
<span id="line587"></span>    // Return the sprite
<span id="line588"></span>    return sprite;
<span id="line589"></span>
<span id="line590"></span>  }
<span id="line591"></span>}
<span id="line592"></span>
<span id="line593"></span>/**
<span id="line594"></span> * Special parser for box-shadow syntax.
<span id="line595"></span> */
<span id="line596"></span>class ShadowParser {
<span id="line597"></span>  static WHITESPACE = 1;
<span id="line598"></span>  static NUMBER = 2;
<span id="line599"></span>  static COLOR = 3;
<span id="line600"></span>  static COMMA = 4;
<span id="line601"></span>  static END = 5;
<span id="line602"></span>
<span id="line603"></span>  constructor(text, unit) {
<span id="line604"></span>    this.text = text;
<span id="line605"></span>    this.pointer = 0;
<span id="line606"></span>    this.unit = unit;
<span id="line607"></span>    this.c = "";
<span id="line608"></span>    if(text.length &gt; 0) {
<span id="line609"></span>      this.c = text[0];
<span id="line610"></span>    }
<span id="line611"></span>  }
<span id="line612"></span>
<span id="line613"></span>  reset() {
<span id="line614"></span>    this.pointer = 0;
<span id="line615"></span>    this.c = "";
<span id="line616"></span>    if(this.text.length &gt; 0) {
<span id="line617"></span>      this.c = this.text[0];
<span id="line618"></span>    }
<span id="line619"></span>  }
<span id="line620"></span>
<span id="line621"></span>  getNext() {
<span id="line622"></span>    let color = null, numbers = [];
<span id="line623"></span>    let token, data = { value : -1 };
<span id="line624"></span>
<span id="line625"></span>    // Get first token
<span id="line626"></span>    token = this.getToken(data);
<span id="line627"></span>
<span id="line628"></span>    // Skip whitespace
<span id="line629"></span>    if(data.type == ShadowParser.WHITESPACE) {
<span id="line630"></span>      token = this.getToken(data);
<span id="line631"></span>    }
<span id="line632"></span>
<span id="line633"></span>    // If end of file, return null.
<span id="line634"></span>    if(data.type == ShadowParser.END) {
<span id="line635"></span>      return null;
<span id="line636"></span>    }
<span id="line637"></span>
<span id="line638"></span>    // if starting with a color
<span id="line639"></span>    if(data.type == ShadowParser.COLOR) {
<span id="line640"></span>      color = token;
<span id="line641"></span>      token = this.getToken(data);
<span id="line642"></span>      if(data.type == ShadowParser.WHITESPACE) {
<span id="line643"></span>        token = this.getToken(data);
<span id="line644"></span>      }
<span id="line645"></span>    }
<span id="line646"></span>
<span id="line647"></span>    // List of up to four numbers
<span id="line648"></span>    while(data.type == ShadowParser.NUMBER) {
<span id="line649"></span>      if(numbers.length &gt;= 4) {
<span id="line650"></span>        if(color) {
<span id="line651"></span>          throw "(" + String(this.pointer) + ") Unexpected number, expecting comma or end-of-string.";
<span id="line652"></span>        } else {
<span id="line653"></span>          throw "(" + String(this.pointer) + ") Unexpected number, expecting color.";
<span id="line654"></span>        }
<span id="line655"></span>      }
<span id="line656"></span>
<span id="line657"></span>      let value = parseInt(token);
<span id="line658"></span>      if(data.unit != this.unit) {
<span id="line659"></span>        throw "(" + String(this.pointer) + ") Unexpected unit \"" + data.unit + "\", expected \"" + this.unit + "\". The box-shadow units must match the width property units.";
<span id="line660"></span>      }
<span id="line661"></span>      numbers.push(value);
<span id="line662"></span>
<span id="line663"></span>      // Next token
<span id="line664"></span>      token = this.getToken(data);
<span id="line665"></span>
<span id="line666"></span>      // Skip whitespace
<span id="line667"></span>      if(data.type == ShadowParser.WHITESPACE) {
<span id="line668"></span>        token = this.getToken(data);
<span id="line669"></span>      }
<span id="line670"></span>    }
<span id="line671"></span>
<span id="line672"></span>    if(numbers.length </span><span>&lt; </span><span>2) {
<span id="line673"></span>      throw "(" + String(this.pointer) + ") Expecting at least 2 numeric values, found \"" + String(numbers.length) + "\".";
<span id="line674"></span>    }
<span id="line675"></span>
<span id="line676"></span>    // If ending with a color
<span id="line677"></span>    if(!color) {
<span id="line678"></span>      if(data.type == ShadowParser.COLOR) {
<span id="line679"></span>        color = token;
<span id="line680"></span>        if(data.type == ShadowParser.WHITESPACE) {
<span id="line681"></span>          token = this.getToken(data);
<span id="line682"></span>        }
<span id="line683"></span>      }
<span id="line684"></span>    }
<span id="line685"></span>
<span id="line686"></span>    // Expecting a comma or end of document
<span id="line687"></span>    if(data.type != ShadowParser.COMMA &amp;&amp; data.type != ShadowParser.END) {
<span id="line688"></span>      throw "(" + String(this.pointer) + ") Unexpected \"" + this.c + "\", expecting comma or end-of-string";
<span id="line689"></span>    }
<span id="line690"></span>
<span id="line691"></span>    return {
<span id="line692"></span>      color : color,
<span id="line693"></span>      x : parseInt(numbers[0]),
<span id="line694"></span>      y : parseInt(numbers[1])
<span id="line695"></span>    };
<span id="line696"></span>
<span id="line697"></span>  }
<span id="line698"></span>
<span id="line699"></span>  getToken(data) {
<span id="line700"></span>    data.unit = "";
<span id="line701"></span>    if(this.c == ",") {
<span id="line702"></span>      data.type = ShadowParser.COMMA
<span id="line703"></span>      this.next()
<span id="line704"></span>      return this.c;
<span id="line705"></span>    } else if(this.c == "r") {
<span id="line706"></span>      data.type = ShadowParser.COLOR;
<span id="line707"></span>      return this.parseColor();
<span id="line708"></span>    } else if(/[\s\t\r\n]/.test(this.c)) {
<span id="line709"></span>      data.type = ShadowParser.WHITESPACE;
<span id="line710"></span>      return this.parseWhitespace();
<span id="line711"></span>    } else if(/\d/.test(this.c)) {
<span id="line712"></span>      let info = {};
<span id="line713"></span>      data.type = ShadowParser.NUMBER;
<span id="line714"></span>      let value = this.parseNumber(info);
<span id="line715"></span>      data.unit = info.unit;
<span id="line716"></span>      return value;
<span id="line717"></span>    } else if(this.c == "") {
<span id="line718"></span>      data.type = ShadowParser.END;
<span id="line719"></span>    } else {
<span id="line720"></span>      throw "(" + String(this.pointer) + ") Unexpected character \"" + this.c + "\"";
<span id="line721"></span>    }
<span id="line722"></span>  }
<span id="line723"></span>
<span id="line724"></span>  parseWhitespace() {
<span id="line725"></span>    let out = "";
<span id="line726"></span>    while(/[\s\n\r\t]/.test(this.c)) {
<span id="line727"></span>      out += this.c;
<span id="line728"></span>      this.next();
<span id="line729"></span>    }
<span id="line730"></span>    return out;
<span id="line731"></span>  }
<span id="line732"></span>
<span id="line733"></span>  parseNumber(data) {
<span id="line734"></span>    if(!data) data = {};
<span id="line735"></span>    let out = "";
<span id="line736"></span>    data.unit = "";
<span id="line737"></span>    while(/\d/.test(this.c)) {
<span id="line738"></span>      out += this.c;
<span id="line739"></span>      this.next();
<span id="line740"></span>    }
<span id="line741"></span>    while(/[a-zA-Z%]/.test(this.c)) {
<span id="line742"></span>      data.unit += this.c;
<span id="line743"></span>      out += this.c;
<span id="line744"></span>      this.next();
<span id="line745"></span>    }
<span id="line746"></span>    if(out.length == 0) {
<span id="line747"></span>      throw "(" + String(this.pointer) + ") Unexpected \"" + this.c + "\", expecting number.";
<span id="line748"></span>    }
<span id="line749"></span>    return out;
<span id="line750"></span>  }
<span id="line751"></span>
<span id="line752"></span>  parseColor() {
<span id="line753"></span>    let type = this.c;
<span id="line754"></span>
<span id="line755"></span>    this.next();
<span id="line756"></span>    type += this.c;
<span id="line757"></span>
<span id="line758"></span>    if(this.c == "g") {
<span id="line759"></span>      this.next();
<span id="line760"></span>      type += this.c;
<span id="line761"></span>    } else {
<span id="line762"></span>      throw "(" + String(this.pointer) + ") Unexpected color format: \"" + type + "\"";
<span id="line763"></span>    }
<span id="line764"></span>
<span id="line765"></span>    if(this.c == "b") {
<span id="line766"></span>      this.next();
<span id="line767"></span>    } else {
<span id="line768"></span>      throw "(" + String(this.pointer) + ") Unexpected color format: \"" + type + "\"";
<span id="line769"></span>    }
<span id="line770"></span>
<span id="line771"></span>    if(this.c != "(") {
<span id="line772"></span>      type += this.c;
<span id="line773"></span>    }
<span id="line774"></span>
<span id="line775"></span>    if(this.c == "a") {
<span id="line776"></span>      this.next();
<span id="line777"></span>    }
<span id="line778"></span>
<span id="line779"></span>    if(this.c == "(") {
<span id="line780"></span>      let r, g, b, a;
<span id="line781"></span>      a = 255;
<span id="line782"></span>
<span id="line783"></span>      this.next();
<span id="line784"></span>      this.parseWhitespace();
<span id="line785"></span>      r = parseInt(this.parseNumber());
<span id="line786"></span>      this.parseWhitespace();
<span id="line787"></span>
<span id="line788"></span>      if(this.c == ",") {
<span id="line789"></span>        this.next();
<span id="line790"></span>        this.parseWhitespace();
<span id="line791"></span>        g = parseInt(this.parseNumber());
<span id="line792"></span>        this.parseWhitespace();
<span id="line793"></span>
<span id="line794"></span>        if(this.c == ",") {
<span id="line795"></span>
<span id="line796"></span>          this.next();
<span id="line797"></span>          this.parseWhitespace();
<span id="line798"></span>          b = parseInt(this.parseNumber());
<span id="line799"></span>          this.parseWhitespace();
<span id="line800"></span>
<span id="line801"></span>          if(type == "rgba") {
<span id="line802"></span>            if(this.c == ",") {
<span id="line803"></span>              this.next();
<span id="line804"></span>              this.parseWhitespace();
<span id="line805"></span>              a = parseInt(this.parseNumber());
<span id="line806"></span>              this.parseWhitespace();
<span id="line807"></span>            } else {
<span id="line808"></span>              throw "(" + String(this.pointer) + ") Unexpected \"" + this.c + "\" in color definition, expecting \",\"";
<span id="line809"></span>            }
<span id="line810"></span>          }
<span id="line811"></span>
<span id="line812"></span>          if(this.c == ")") {
<span id="line813"></span>            this.next();
<span id="line814"></span>            return [r, g, b, a];
<span id="line815"></span>          } else {
<span id="line816"></span>            throw "(" + String(this.pointer) + ") Unexpected \"" + this.c + "\" in color definition, expecting \")\"";
<span id="line817"></span>          }
<span id="line818"></span>        }
<span id="line819"></span>      } else {
<span id="line820"></span>        throw "(" + String(this.pointer) + ") Unexpected \"" + this.c + "\" in color definition, expecting \",\"";
<span id="line821"></span>      }
<span id="line822"></span>    } else {
<span id="line823"></span>      throw "(" + String(this.pointer) + ") Unexpected color format: \"" + type + "\"";
<span id="line824"></span>    }
<span id="line825"></span>
<span id="line826"></span>  }
<span id="line827"></span>
<span id="line828"></span>  next() {
<span id="line829"></span>    if(this.pointer </span><span>&lt; </span><span>this.text.length - 1) {
<span id="line830"></span>      this.pointer++;
<span id="line831"></span>      this.c = this.text[this.pointer];
<span id="line832"></span>    } else {
<span id="line833"></span>      this.c = "";
<span id="line834"></span>    }
<span id="line835"></span>  }
<span id="line836"></span>
<span id="line837"></span>}
<span id="line838"></span>
<span id="line839"></span>/**
<span id="line840"></span> * Sprite library
<span id="line841"></span> */
<span id="line842"></span>class Library {
<span id="line843"></span>  static counter = 0;
<span id="line844"></span>  constructor(editor) {
<span id="line845"></span>    this.editor = editor;
<span id="line846"></span>    this.sprites = [];
<span id="line847"></span>    this.activeSprite = null;
<span id="line848"></span>    this.spriteList = document.getElementById("sprite-list");
<span id="line849"></span>    this.noSprite = document.querySelector(".no-sprite");
<span id="line850"></span>
<span id="line851"></span>    this.noSprite.classList.add("selected");
<span id="line852"></span>    this.noSprite.addEventListener("click", e =&gt; this.setActiveSprite(null) );
<span id="line853"></span>  }
<span id="line854"></span>
<span id="line855"></span>  getSpriteById(id) {
<span id="line856"></span>    for(let i = 0; i </span><span>&lt; </span><span>this.sprites.length; i++) {
<span id="line857"></span>      let sprite = this.sprites[i];
<span id="line858"></span>      if(sprite.id == id) {
<span id="line859"></span>        return sprite;
<span id="line860"></span>      }
<span id="line861"></span>    }
<span id="line862"></span>  }
<span id="line863"></span>
<span id="line864"></span>  addSprite(sprite) {
<span id="line865"></span>    sprite.id = Library.counter++;
<span id="line866"></span>    this.sprites.push(sprite);
<span id="line867"></span>
<span id="line868"></span>    let canvas = document.createElement("canvas");
<span id="line869"></span>    canvas.width = sprite.width;
<span id="line870"></span>    canvas.height = sprite.height;
<span id="line871"></span>    canvas.id =  "s" + String(sprite.id);
<span id="line872"></span>    canvas.setAttribute("data-id", String(sprite.id));
<span id="line873"></span>    canvas.addEventListener("click", this.eventSelectSprite.bind(this));
<span id="line874"></span>    this.spriteList.appendChild(canvas);
<span id="line875"></span>    let ctx = canvas.getContext("2d");
<span id="line876"></span>    let imageData = ctx.createImageData(sprite.width, sprite.height);
<span id="line877"></span>    for(let i = 0; i </span><span>&lt; </span><span>sprite.data.length; i++) {
<span id="line878"></span>      imageData.data[i] = sprite.data[i];
<span id="line879"></span>    }
<span id="line880"></span>    ctx.putImageData(imageData, 0, 0);
<span id="line881"></span>
<span id="line882"></span>  }
<span id="line883"></span>
<span id="line884"></span>  deleteSprite(id) {
<span id="line885"></span>    for(let i = 0; i </span><span>&lt; </span><span>this.sprites.length; i++) {
<span id="line886"></span>      if(this.sprites[i].id == id) {
<span id="line887"></span>        if(this.sprites[i] == this.activeSprite) {
<span id="line888"></span>          this.activeSprite = null;
<span id="line889"></span>        }
<span id="line890"></span>        this.sprites.splice(i, 1);
<span id="line891"></span>        break;
<span id="line892"></span>      }
<span id="line893"></span>    }
<span id="line894"></span>  }
<span id="line895"></span>
<span id="line896"></span>  setActiveSprite(id) {
<span id="line897"></span>    this.spriteList.querySelectorAll("canvas").forEach( c =&gt; c.classList.remove("selected") );
<span id="line898"></span>    if(id === null) {
<span id="line899"></span>      this.activeSprite = null;
<span id="line900"></span>      this.noSprite.classList.add("selected");
<span id="line901"></span>    } else {
<span id="line902"></span>      this.activeSprite = this.getSpriteById(id);
<span id="line903"></span>      document.getElementById("s" + id).classList.add("selected");
<span id="line904"></span>      this.noSprite.classList.remove("selected");
<span id="line905"></span>    }
<span id="line906"></span>    this.editor.setActiveSprite(this.activeSprite);
<span id="line907"></span>  }
<span id="line908"></span>
<span id="line909"></span>  getActiveSprite() {
<span id="line910"></span>    return this.activeSprite;
<span id="line911"></span>  }
<span id="line912"></span>
<span id="line913"></span>  eventSelectSprite(e) {
<span id="line914"></span>    let id = Number(e.currentTarget.getAttribute("data-id"));
<span id="line915"></span>    this.setActiveSprite(id);
<span id="line916"></span>  }
<span id="line917"></span>}
<span id="line918"></span>
<span id="line919"></span>/**
<span id="line920"></span> * Sprite layers allow the user to choose the visual order of sprites.
<span id="line921"></span> */
<span id="line922"></span>class Layer {
<span id="line923"></span>  static counter = 0;
<span id="line924"></span>  constructor(name) {
<span id="line925"></span>    this.id = Layer.counter++;
<span id="line926"></span>    this.name = name;
<span id="line927"></span>    this.sprites = [];
<span id="line928"></span>  }
<span id="line929"></span>  
<span id="line930"></span>  getInstanceById(id) {
<span id="line931"></span>    let len = this.sprites.length;
<span id="line932"></span>    for(let i = 0; i </span><span>&lt; </span><span>len; i++) {
<span id="line933"></span>      let sprite = this.sprites[i];
<span id="line934"></span>      if(sprite.id == id) {
<span id="line935"></span>        return sprite;
<span id="line936"></span>      }
<span id="line937"></span>    }
<span id="line938"></span>    return null;
<span id="line939"></span>  }
<span id="line940"></span>}
<span id="line941"></span>
<span id="line942"></span>/**
<span id="line943"></span> * Interfaces with the output HTML document in which the world will be represented.
<span id="line944"></span> */
<span id="line945"></span>class World {
<span id="line946"></span>  constructor(editor, css) {
<span id="line947"></span>    this.editor = editor;
<span id="line948"></span>    this.css = css;
<span id="line949"></span>    
<span id="line950"></span>    // Edit mode
<span id="line951"></span>    this.placeMode = false;
<span id="line952"></span>
<span id="line953"></span>    // Create the iframe
<span id="line954"></span>    this.frame = document.createElement("iframe");
<span id="line955"></span>    this.frame.id = "world";
<span id="line956"></span>    document.getElementById("world-area").appendChild(this.frame);
<span id="line957"></span>    this.doc = this.frame.contentWindow.document;
<span id="line958"></span>
<span id="line959"></span>    // Write a base document into the frame
<span id="line960"></span>    this.doc.open();
<span id="line961"></span>    this.doc.write("</span><span>&lt;!</span><span>DOCTYPE html&gt;</span><span>&lt;h</span><span>tml&gt;</span><span>&lt;h</span><span>ead&gt;</span><span>&lt;t</span><span>itle&gt;My Pixel World</span><span>&lt;/<span></span>t</span><span>itle&gt;</span><span>&lt;/<span></span>h</span><span>ead&gt;</span><span>&lt;b</span><span>ody&gt;</span><span>&lt;/<span></span>b</span><span>ody&gt;</span><span>&lt;/<span></span>h</span><span>tml&gt;");
<span id="line962"></span>    this.doc.close();
<span id="line963"></span>    
<span id="line964"></span>    // Edit mode is on (edit mode and place mode are mutually exclusive)
<span id="line965"></span>    this.doc.body.classList.add("edit");
<span id="line966"></span>    this.doc.body.editor = this.editor;
<span id="line967"></span>
<span id="line968"></span>    // Create a style container for sprite definitions
<span id="line969"></span>    this.used = {};
<span id="line970"></span>    this.definitions = this.doc.createElement("style");
<span id="line971"></span>    this.doc.head.appendChild(this.definitions);
<span id="line972"></span>
<span id="line973"></span>    // Add general styles to the document
<span id="line974"></span>    let style = this.doc.createElement("style");
<span id="line975"></span>    style.innerHTML = document.getElementById("internal-stylesheet").innerHTML;
<span id="line976"></span>    this.doc.head.appendChild(style);
<span id="line977"></span>    
<span id="line978"></span>    // Create a placeholder
<span id="line979"></span>    this.placeholder = this.doc.createElement("div");
<span id="line980"></span>    this.placeholder.id = "placeholder";
<span id="line981"></span>    this.placeholder.editor = this.editor;
<span id="line982"></span>  }
<span id="line983"></span>
<span id="line984"></span>  regenerate(layers) {
<span id="line985"></span>    this.deletePlaceholder();
<span id="line986"></span>    this.doc.body.innerHTML = "";
<span id="line987"></span>    this.definitions.innerHTML = "";
<span id="line988"></span>    this.used = {};
<span id="line989"></span>    layers.forEach( layer =&gt; {
<span id="line990"></span>
<span id="line991"></span>      // Create container
<span id="line992"></span>      let layerEl = this.doc.createElement("div");
<span id="line993"></span>      layerEl.className = "layer";
<span id="line994"></span>      layerEl.id = "l" + String(layer.id);
<span id="line995"></span>      layerEl.setAttribute("data-name", layer.name);
<span id="line996"></span>      this.doc.body.appendChild(layerEl);
<span id="line997"></span>      if(layer.id == this.editor.activeLayer.id) {
<span id="line998"></span>        this.activeLayer = layerEl;
<span id="line999"></span>        if(this.placeMode) {
<span id="line1000"></span>          this.activeLayer.appendChild(this.placeholder);
<span id="line1001"></span>        }
<span id="line1002"></span>      }
<span id="line1003"></span>
<span id="line1004"></span>      // Append sprites and update stylesheet
<span id="line1005"></span>      layer.sprites.forEach( instance =&gt; {
<span id="line1006"></span>
<span id="line1007"></span>        // Add definition to stylesheet if needed
<span id="line1008"></span>        if(!this.used[instance.sprite.id]) {
<span id="line1009"></span>          let css = this.css.getCSSFromSprite(instance.sprite, this.editor.pixelSize);
<span id="line1010"></span>          let node = document.createTextNode(css);
<span id="line1011"></span>          this.definitions.appendChild(node);
<span id="line1012"></span>          this.used[instance.sprite.id] = true;
<span id="line1013"></span>        }
<span id="line1014"></span>
<span id="line1015"></span>        // Create an element for the sprite instance
<span id="line1016"></span>        let top = instance.x * this.editor.pixelSize;
<span id="line1017"></span>        let left = instance.y * this.editor.pixelSize;
<span id="line1018"></span>        let spriteEl = this.doc.createElement("div");
<span id="line1019"></span>        spriteEl.id = "i" + instance.id;
<span id="line1020"></span>        spriteEl.className = "s s" + String(instance.sprite.id);
<span id="line1021"></span>        spriteEl.setAttribute("data-id", String(instance.sprite.id));
<span id="line1022"></span>        spriteEl.editor = this.editor;
<span id="line1023"></span>        spriteEl.style.left = String(instance.x * this.editor.pixelSize) + "px";
<span id="line1024"></span>        spriteEl.style.top = String(instance.y * this.editor.pixelSize) + "px";
<span id="line1025"></span>        layerEl.appendChild(spriteEl);
<span id="line1026"></span>      });
<span id="line1027"></span>
<span id="line1028"></span>    });
<span id="line1029"></span>  }
<span id="line1030"></span>  
<span id="line1031"></span>  addLayer(id) {
<span id="line1032"></span>    let layerEl = this.doc.createElement("div");
<span id="line1033"></span>    layerEl.className = "layer";
<span id="line1034"></span>    layerEl.id = "l" + String(id);
<span id="line1035"></span>    layerEl.setAttribute("data-name", this.editor.getLayerById(id).name);
<span id="line1036"></span>    this.doc.body.appendChild(layerEl);
<span id="line1037"></span>  }
<span id="line1038"></span>  
<span id="line1039"></span>  renameLayer(id, name) {
<span id="line1040"></span>    let el = this.doc.getElementById("l" + String(id));
<span id="line1041"></span>    if(el) {
<span id="line1042"></span>      el.setAttribute("data-name", name);
<span id="line1043"></span>    }
<span id="line1044"></span>  }
<span id="line1045"></span>  
<span id="line1046"></span>  deleteLayer(id) {
<span id="line1047"></span>    let layer = this.doc.getElementById("l" + String(id));
<span id="line1048"></span>    if(this.activeLayer == layer) {
<span id="line1049"></span>      this.activeLayer = null;
<span id="line1050"></span>    }
<span id="line1051"></span>    layer.remove();
<span id="line1052"></span>  }
<span id="line1053"></span>  
<span id="line1054"></span>  addSpriteDefinition(sprite) {
<span id="line1055"></span>    let css = this.css.getCSSFromSprite(sprite, this.editor.pixelSize);
<span id="line1056"></span>    let node = document.createTextNode(css);
<span id="line1057"></span>    this.definitions.appendChild(node);
<span id="line1058"></span>    this.used[sprite.id] = true;
<span id="line1059"></span>  }
<span id="line1060"></span>
<span id="line1061"></span>  setActiveLayer(id) {
<span id="line1062"></span>    this.activeLayer = this.doc.getElementById("l" + String(id));
<span id="line1063"></span>    if(this.placeholder.parentNode) {
<span id="line1064"></span>      this.activeLayer.appendChild(this.placeholder);
<span id="line1065"></span>    }
<span id="line1066"></span>  }
<span id="line1067"></span>  
<span id="line1068"></span>  deletePlaceholder() {
<span id="line1069"></span>    if(this.placeMode) {
<span id="line1070"></span>      this.doc.body.removeEventListener("mousemove", this.eventUpdatePos);
<span id="line1071"></span>      this.doc.body.removeEventListener("mouseup", this.eventPlace);
<span id="line1072"></span>      this.doc.body.addEventListener("mousedown", this.eventBeginMove);
<span id="line1073"></span>      this.doc.body.addEventListener("touchstart", this.eventBeginMove);
<span id="line1074"></span>      this.doc.body.addEventListener("mouseup", this.eventEndMove);
<span id="line1075"></span>      this.doc.body.addEventListener("touchend", this.eventEndMove);
<span id="line1076"></span>    }
<span id="line1077"></span>    this.placeholder.remove();
<span id="line1078"></span>    this.placeMode = false;
<span id="line1079"></span>    this.doc.body.classList.add("edit");
<span id="line1080"></span>  }
<span id="line1081"></span>  
<span id="line1082"></span>  updatePlaceholder(id) {
<span id="line1083"></span>    this.placeholder.className = "s" + String(id);
<span id="line1084"></span>    this.placeholder.setAttribute("data-id", String(id));
<span id="line1085"></span>    this.placeholder.style.left = "-1000px";
<span id="line1086"></span>    this.placeholder.style.top = "-1000px";
<span id="line1087"></span>    if(this.activeLayer) {
<span id="line1088"></span>      this.activeLayer.appendChild(this.placeholder);
<span id="line1089"></span>      if(!this.placeMode) {
<span id="line1090"></span>        this.doc.body.addEventListener("mousemove", this.eventUpdatePos);
<span id="line1091"></span>        this.doc.body.addEventListener("mouseup", this.eventPlace);
<span id="line1092"></span>        this.doc.body.removeEventListener("mousedown", this.eventBeginMove);
<span id="line1093"></span>        this.doc.body.removeEventListener("touchstart", this.eventBeginMove);
<span id="line1094"></span>        this.doc.body.removeEventListener("touchmove", this.eventMove);
<span id="line1095"></span>        this.doc.body.removeEventListener("touchend", this.eventEndMove);
<span id="line1096"></span>        this.placeMode = true;
<span id="line1097"></span>        this.doc.body.classList.remove("edit");
<span id="line1098"></span>      }
<span id="line1099"></span>    }
<span id="line1100"></span>  }
<span id="line1101"></span>  
<span id="line1102"></span>  getHTML() {
<span id="line1103"></span>    if(this.placeholder.parentNode) {
<span id="line1104"></span>      this.placeholder.remove();
<span id="line1105"></span>    }
<span id="line1106"></span>    
<span id="line1107"></span>    this.doc.body.classList.remove("edit");
<span id="line1108"></span>    
<span id="line1109"></span>    let bg = document.getElementById("world-area").style.backgroundColor;
<span id="line1110"></span>    this.doc.documentElement.setAttribute("style", "background-color:" + bg);
<span id="line1111"></span>    let out = this.doc.documentElement.outerHTML;
<span id="line1112"></span>    this.doc.documentElement.removeAttribute("style");
<span id="line1113"></span>    
<span id="line1114"></span>    if(!this.placeMode) {
<span id="line1115"></span>      this.doc.body.classList.add("edit");
<span id="line1116"></span>    }
<span id="line1117"></span>    
<span id="line1118"></span>    if(this.placeMode &amp;&amp; this.activeLayer) {
<span id="line1119"></span>      this.activeLater.appendChild(this.placeholder);
<span id="line1120"></span>    }
<span id="line1121"></span>    
<span id="line1122"></span>    return out;
<span id="line1123"></span>  }
<span id="line1124"></span>  
<span id="line1125"></span>  eventUpdatePos(e) {
<span id="line1126"></span>    let doc = e.currentTarget.ownerDocument;
<span id="line1127"></span>    let placeholder = doc.getElementById("placeholder");
<span id="line1128"></span>    if(!placeholder) {
<span id="line1129"></span>      return;
<span id="line1130"></span>    }
<span id="line1131"></span>    let editor = placeholder.editor;
<span id="line1132"></span>    let realX = Math.floor(e.pageX / editor.pixelSize) - 1;
<span id="line1133"></span>    let realY = Math.floor(e.pageY / editor.pixelSize) - 1;
<span id="line1134"></span>    let x = realX * editor.pixelSize;
<span id="line1135"></span>    let y = realY * editor.pixelSize;
<span id="line1136"></span>    placeholder.setAttribute("data-pos", String(realX) + "," + String(realY));
<span id="line1137"></span>    placeholder.style.left = String(x) + "px";
<span id="line1138"></span>    placeholder.style.top = String(y) + "px";
<span id="line1139"></span>  }
<span id="line1140"></span>  
<span id="line1141"></span>  eventPlace(e) {
<span id="line1142"></span>    let doc = e.currentTarget.ownerDocument;
<span id="line1143"></span>    let placeholder = doc.getElementById("placeholder");
<span id="line1144"></span>    if(!placeholder) {
<span id="line1145"></span>      return;
<span id="line1146"></span>    }
<span id="line1147"></span>    let editor = placeholder.editor;
<span id="line1148"></span>    let next = placeholder.cloneNode(true);
<span id="line1149"></span>    next.editor = editor;
<span id="line1150"></span>    next.classList.add("s");
<span id="line1151"></span>    next.removeAttribute("data-pos");
<span id="line1152"></span>    placeholder.parentNode.appendChild(next);
<span id="line1153"></span>    let id = Number(placeholder.getAttribute("data-id"));
<span id="line1154"></span>    let pos = placeholder.getAttribute("data-pos").split(",");
<span id="line1155"></span>    let x = Number(pos[0]);
<span id="line1156"></span>    let y = Number(pos[1]);
<span id="line1157"></span>    let instanceId = editor.addSpriteToActiveLayer(id, x, y);
<span id="line1158"></span>    next.id = "i" + instanceId;
<span id="line1159"></span>  }
<span id="line1160"></span>  
<span id="line1161"></span>  eventBeginMove(e) {
<span id="line1162"></span>    let instance = e.target;
<span id="line1163"></span>    if(instance.classList.contains("s")) {
<span id="line1164"></span>      let body = e.currentTarget;
<span id="line1165"></span>      if(e.type == "mousedown") {
<span id="line1166"></span>        body.addEventListener("mousemove", World.eventMove);
<span id="line1167"></span>      } else if(e.type == "touchstart") {
<span id="line1168"></span>        body.addEventListener("touchmove", World.eventMove);
<span id="line1169"></span>        e.pageX = e.touches[0].pageX;
<span id="line1170"></span>        e.pageY = e.touches[0].pageY;
<span id="line1171"></span>      }
<span id="line1172"></span>      body.setAttribute("data-instance", e.target.id);
<span id="line1173"></span>      body.setAttribute("data-startx", parseInt(instance.style.left));
<span id="line1174"></span>      body.setAttribute("data-starty", parseInt(instance.style.top));
<span id="line1175"></span>      body.setAttribute("data-mousex", e.pageX);
<span id="line1176"></span>      body.setAttribute("data-mousey", e.pageY);
<span id="line1177"></span>    }
<span id="line1178"></span>  }
<span id="line1179"></span>  
<span id="line1180"></span>  static eventMove(e) {
<span id="line1181"></span>    let body = e.currentTarget;
<span id="line1182"></span>    let id = body.getAttribute("data-instance");
<span id="line1183"></span>    if(id) {
<span id="line1184"></span>      if(e.type == "touchmove") {
<span id="line1185"></span>        e.pageX = e.touches[0].pageX;
<span id="line1186"></span>        e.pageY = e.touches[0].pageY;
<span id="line1187"></span>      }
<span id="line1188"></span>      let instance = body.ownerDocument.getElementById(id);
<span id="line1189"></span>      let editor = body.editor;
<span id="line1190"></span>      let startX = Number(body.getAttribute("data-startx"));
<span id="line1191"></span>      let startY = Number(body.getAttribute("data-starty"));
<span id="line1192"></span>      let offsetX = e.pageX - Number(body.getAttribute("data-mousex"));
<span id="line1193"></span>      let offsetY = e.pageY - Number(body.getAttribute("data-mousey"));
<span id="line1194"></span>      offsetX = Math.floor(offsetX / editor.pixelSize) * editor.pixelSize;
<span id="line1195"></span>      offsetY = Math.floor(offsetY / editor.pixelSize) * editor.pixelSize;
<span id="line1196"></span>      let x = startX + offsetX;
<span id="line1197"></span>      let y = startY + offsetY;
<span id="line1198"></span>      instance.style.left = String(x) + "px";
<span id="line1199"></span>      instance.style.top  = String(y) + "px";
<span id="line1200"></span>    } else {
<span id="line1201"></span>      body.removeEventListener("mousemove", World.eventMove);
<span id="line1202"></span>      body.removeEventListener("touchmove", World.eventMove);
<span id="line1203"></span>      body.removeAttribute("data-startx");
<span id="line1204"></span>      body.removeAttribute("data-starty");
<span id="line1205"></span>      body.removeAttribute("data-mousex");
<span id="line1206"></span>      body.removeAttribute("data-mousey");
<span id="line1207"></span>    }
<span id="line1208"></span>  }
<span id="line1209"></span>  
<span id="line1210"></span>  eventEndMove(e) {
<span id="line1211"></span>    let body = e.currentTarget;
<span id="line1212"></span>    let id = body.getAttribute("data-instance");
<span id="line1213"></span>    if(id) {
<span id="line1214"></span>      body.removeEventListener("mousemove", World.eventMove);
<span id="line1215"></span>      body.removeEventListener("touchmove", World.eventMove);
<span id="line1216"></span>      let instance = body.ownerDocument.getElementById(id);
<span id="line1217"></span>      let editor = body.editor;
<span id="line1218"></span>      let layerId = Number(instance.parentNode.getAttribute("data-id"));
<span id="line1219"></span>      let instanceId = Number(instance.id.substr(1));
<span id="line1220"></span>      let x = parseInt(instance.style.left) / editor.pixelSize;
<span id="line1221"></span>      let y = parseInt(instance.style.top) / editor.pixelSize;
<span id="line1222"></span>      editor.relocateSprite(layerId, instanceId, x, y);
<span id="line1223"></span>      body.removeAttribute("data-instance");
<span id="line1224"></span>      body.removeAttribute("data-startx");
<span id="line1225"></span>      body.removeAttribute("data-starty");
<span id="line1226"></span>      body.removeAttribute("data-mousex");
<span id="line1227"></span>      body.removeAttribute("data-mousey");
<span id="line1228"></span>    }
<span id="line1229"></span>  }
<span id="line1230"></span>
<span id="line1231"></span>}
<span id="line1232"></span>
<span id="line1233"></span>/**
<span id="line1234"></span> * Takes input from the user and moves data between all the classes.
<span id="line1235"></span> * Handles layers and sprite instances.
<span id="line1236"></span> */
<span id="line1237"></span>class WorldEditor {
<span id="line1238"></span>  init() {
<span id="line1239"></span>    this.css = new CSSInterface();
<span id="line1240"></span>    this.library = new Library(this);
<span id="line1241"></span>    this.world = new World(this, this.css);
<span id="line1242"></span>
<span id="line1243"></span>    // Settings
<span id="line1244"></span>    this.pixelSize = 10;
<span id="line1245"></span>    this.activeSprite = null;
<span id="line1246"></span>
<span id="line1247"></span>    // Import
<span id="line1248"></span>    let openModal = e =&gt; {
<span id="line1249"></span>      document.getElementById("import-errors").style.display = "none";
<span id="line1250"></span>      document.getElementById("import-modal").style.display = "";
<span id="line1251"></span>      document.getElementById("pixelart-css-code").value = "";
<span id="line1252"></span>    };
<span id="line1253"></span>    let closeModal = e =&gt; document.getElementById("import-modal").style.display = "none";
<span id="line1254"></span>    document.getElementById("open-import-window").addEventListener("click", openModal);
<span id="line1255"></span>    document.querySelector("#import-modal .close").addEventListener("click", closeModal);
<span id="line1256"></span>    document.getElementById("import-pixelart").addEventListener("click", this.eventImportCSS.bind(this));
<span id="line1257"></span>
<span id="line1258"></span>    // Layers window
<span id="line1259"></span>    this.layersBox = document.getElementById("layers");
<span id="line1260"></span>    this.layers = [];
<span id="line1261"></span>    this.activeLayer = null;
<span id="line1262"></span>    this.addLayer("Layer 1");
<span id="line1263"></span>
<span id="line1264"></span>    // Add layer
<span id="line1265"></span>    document.getElementById("add-layer").addEventListener("click", e =&gt; {
<span id="line1266"></span>      let id = this.addLayer("Layer").id;
<span id="line1267"></span>      let el = document.getElementById("l" + String(id));
<span id="line1268"></span>      el.classList.add("edit");
<span id="line1269"></span>      el.querySelector(".field").focus();
<span id="line1270"></span>    });
<span id="line1271"></span>
<span id="line1272"></span>    // Layer drag placeholder
<span id="line1273"></span>    let placeholder = this.layersBox.querySelector(".placeholder-layer");
<span id="line1274"></span>    placeholder.addEventListener("dragover", this.eventAllowDrop.bind(this));
<span id="line1275"></span>    placeholder.addEventListener("dragenter", this.eventDragEnter.bind(this));
<span id="line1276"></span>    placeholder.addEventListener("dragleave", this.eventDragExit.bind(this));
<span id="line1277"></span>    placeholder.addEventListener("drop", this.eventLayerDrop.bind(this));
<span id="line1278"></span>
<span id="line1279"></span>    // Grid checkbox
<span id="line1280"></span>    document.getElementById("show-grid").addEventListener("change", this.eventToggleGrid.bind(this));
<span id="line1281"></span>
<span id="line1282"></span>    // Pixel size form
<span id="line1283"></span>    document.getElementById("pixel-size").value = this.pixelSize;
<span id="line1284"></span>    document.getElementById("pixel-size").addEventListener("input", this.eventPixelSize.bind(this));
<span id="line1285"></span>    
<span id="line1286"></span>    // Background
<span id="line1287"></span>    let bgSelect = document.getElementById("background-color");
<span id="line1288"></span>    document.getElementById("world-area").style.backgroundColor = bgSelect.value;
<span id="line1289"></span>    bgSelect.addEventListener("input", e =&gt; {
<span id="line1290"></span>      document.getElementById("world-area").style.backgroundColor = e.currentTarget.value;
<span id="line1291"></span>    });
<span id="line1292"></span>    
<span id="line1293"></span>    // Save
<span id="line1294"></span>    document.getElementById("save").addEventListener("click", notImplemented);
<span id="line1295"></span>    document.getElementById("load").addEventListener("click", notImplemented);
<span id="line1296"></span>    document.getElementById("export").addEventListener("click", this.eventExport.bind(this));
<span id="line1297"></span>
<span id="line1298"></span>    function notImplemented() {
<span id="line1299"></span>      let modal = document.createElement("div");
<span id="line1300"></span>      modal.className = "modal";
<span id="line1301"></span>      modal.innerHTML = "</span><span>&lt;h</span><span>eader&gt;Not implemented</span><span>&lt;b</span><span>utton class='close'&gt;&amp;times;</span><span>&lt;/<span></span>b</span><span>utton&gt;</span><span>&lt;/<span></span>h</span><span>eader&gt;</span><span>&lt;d</span><span>iv class='body'&gt;</span><span>&lt;p</span><span>&gt;This is an experimental application, so this feature hasn't been built yet. I left this here as a reminder of some features that would really benefit the application.</span><span>&lt;/<span></span>p</span><span>&gt;</span><span>&lt;/<span></span>d</span><span>iv&gt;";
<span id="line1302"></span>      modal.addEventListener("click", e =&gt; e.currentTarget.remove() );
<span id="line1303"></span>      modal.style.left = "50%";
<span id="line1304"></span>      modal.style.marginLeft = "-200px";
<span id="line1305"></span>      modal.style.width = "400px";
<span id="line1306"></span>      document.body.appendChild(modal);
<span id="line1307"></span>    }
<span id="line1308"></span>  }
<span id="line1309"></span>
<span id="line1310"></span>  getLayerById(id) {
<span id="line1311"></span>    for(let i = 0; i </span><span>&lt; </span><span>this.layers.length; i++) {
<span id="line1312"></span>      if(this.layers[i].id == id) {
<span id="line1313"></span>        return this.layers[i];
<span id="line1314"></span>      }
<span id="line1315"></span>    }
<span id="line1316"></span>    return null;
<span id="line1317"></span>  }
<span id="line1318"></span>
<span id="line1319"></span>  regenerateWorld() {
<span id="line1320"></span>    this.world.regenerate(this.layers);
<span id="line1321"></span>  }
<span id="line1322"></span>
<span id="line1323"></span>  addLayer(name) {
<span id="line1324"></span>    // Add to beginning of list
<span id="line1325"></span>    let layer = new Layer(name);
<span id="line1326"></span>    this.layers.unshift(layer);
<span id="line1327"></span>    document.getElementById("layers").setAttribute("data-count", String(this.layers.length));
<span id="line1328"></span>
<span id="line1329"></span>    // Add to beginning of DOM container
<span id="line1330"></span>    let container = document.createElement("div");
<span id="line1331"></span>    container.className = "layer";
<span id="line1332"></span>    container.draggable = true;
<span id="line1333"></span>    container.setAttribute("data-id", layer.id);
<span id="line1334"></span>    container.id = "l" + String(layer.id);
<span id="line1335"></span>    container.addEventListener("dragexit", this.eventDragExit.bind(this));
<span id="line1336"></span>    container.addEventListener("dragenter", this.eventDragEnter.bind(this));
<span id="line1337"></span>    container.addEventListener("dragover", this.eventAllowDrop.bind(this));
<span id="line1338"></span>    container.addEventListener("dragstart", this.eventLayerDrag.bind(this));
<span id="line1339"></span>    container.addEventListener("drop", this.eventLayerDrop.bind(this));
<span id="line1340"></span>    this.layersBox.insertBefore(container, this.layersBox.firstChild);
<span id="line1341"></span>
<span id="line1342"></span>    // Add field
<span id="line1343"></span>    let field = document.createElement("input");
<span id="line1344"></span>    field.type = "text";
<span id="line1345"></span>    field.className = "field";
<span id="line1346"></span>    field.setAttribute("data-id", layer.id);
<span id="line1347"></span>    field.addEventListener("keyup", this.eventLayerNameKey.bind(this));
<span id="line1348"></span>    field.addEventListener("blur", this.eventCancelLayerName.bind(this));
<span id="line1349"></span>    field.value = layer.name;
<span id="line1350"></span>    container.appendChild(field);
<span id="line1351"></span>
<span id="line1352"></span>    // Add select button
<span id="line1353"></span>    let select = document.createElement("a");
<span id="line1354"></span>    select.className = "select";
<span id="line1355"></span>    select.setAttribute("data-id", layer.id);
<span id="line1356"></span>    select.addEventListener("mouseup", this.eventSelectLayer.bind(this));
<span id="line1357"></span>    select.innerHTML = layer.name;
<span id="line1358"></span>    container.appendChild(select);
<span id="line1359"></span>
<span id="line1360"></span>    // Add rename button
<span id="line1361"></span>    let rename = document.createElement("a");
<span id="line1362"></span>    rename.className = "button rename";
<span id="line1363"></span>    rename.setAttribute("data-id", layer.id);
<span id="line1364"></span>    rename.addEventListener("mouseup", this.eventRenameLayer.bind(this));
<span id="line1365"></span>    rename.innerHTML = "&amp;#9881;&amp;#xFE0E;";
<span id="line1366"></span>    container.appendChild(rename);
<span id="line1367"></span>
<span id="line1368"></span>    // Add delete button
<span id="line1369"></span>    let del = document.createElement("a");
<span id="line1370"></span>    del.className = "button delete";
<span id="line1371"></span>    del.setAttribute("data-id", layer.id);
<span id="line1372"></span>    del.addEventListener("mouseup", this.eventDeleteLayer.bind(this));
<span id="line1373"></span>    del.innerHTML = "&amp;times;";
<span id="line1374"></span>    container.appendChild(del);
<span id="line1375"></span>    
<span id="line1376"></span>    // Create in world
<span id="line1377"></span>    this.world.addLayer(layer.id);
<span id="line1378"></span>
<span id="line1379"></span>    // Set as active layer
<span id="line1380"></span>    this.setActiveLayer(layer.id);
<span id="line1381"></span>
<span id="line1382"></span>    return layer;
<span id="line1383"></span>  }
<span id="line1384"></span>
<span id="line1385"></span>  setActiveSprite(sprite) {
<span id="line1386"></span>    this.activeSprite = sprite;
<span id="line1387"></span>    if(sprite == null) {
<span id="line1388"></span>      this.world.deletePlaceholder();
<span id="line1389"></span>    } else {
<span id="line1390"></span>      this.world.updatePlaceholder(sprite.id);
<span id="line1391"></span>    }
<span id="line1392"></span>  }
<span id="line1393"></span>
<span id="line1394"></span>  setActiveLayer(id) {
<span id="line1395"></span>    for(let i = 0; i </span><span>&lt; </span><span>this.layers.length; i++) {
<span id="line1396"></span>      if(this.layers[i].id == id) {
<span id="line1397"></span>        this.layersBox.children[i].classList.add("active");
<span id="line1398"></span>        this.activeLayer = this.layers[i];
<span id="line1399"></span>      } else {
<span id="line1400"></span>        this.layersBox.children[i].classList.remove("active");
<span id="line1401"></span>      }
<span id="line1402"></span>    }
<span id="line1403"></span>    this.world.setActiveLayer(id);
<span id="line1404"></span>  }
<span id="line1405"></span>  
<span id="line1406"></span>  addSpriteToActiveLayer(id, x, y) {
<span id="line1407"></span>    let sprite = this.library.getSpriteById(id);
<span id="line1408"></span>    let instance = new SpriteInstance(sprite, x, y);
<span id="line1409"></span>    this.activeLayer.sprites.push(instance);
<span id="line1410"></span>    return instance.id;
<span id="line1411"></span>  }
<span id="line1412"></span>  
<span id="line1413"></span>  relocateSprite(layerId, spriteId, x, y) {
<span id="line1414"></span>    let layer = this.getLayerById(layerId);
<span id="line1415"></span>    let instance = layer.getInstanceById(spriteId);
<span id="line1416"></span>    instance.x = x;
<span id="line1417"></span>    instance.y = y;
<span id="line1418"></span>  }
<span id="line1419"></span>
<span id="line1420"></span>  renameLayer(id, name) {
<span id="line1421"></span>    let layer = this.getLayerById(id);
<span id="line1422"></span>    if(layer) {
<span id="line1423"></span>      layer.name = name;
<span id="line1424"></span>      let el = document.getElementById("l" + String(id));
<span id="line1425"></span>      el.querySelector(".select").innerHTML = name;
<span id="line1426"></span>      el.querySelector(".field").blur();
<span id="line1427"></span>      el.classList.remove("edit");
<span id="line1428"></span>    }
<span id="line1429"></span>    this.world.renameLayer(id, name);
<span id="line1430"></span>  }
<span id="line1431"></span>
<span id="line1432"></span>  deleteLayer(id) {
<span id="line1433"></span>    if(this.layers.length &gt; 1) {
<span id="line1434"></span>      for(let i = 0; i </span><span>&lt; </span><span>this.layers.length; i++) {
<span id="line1435"></span>        if(this.layers[i].id == id) {
<span id="line1436"></span>          let layer = this.layers[i]
<span id="line1437"></span>          this.layers.splice(i, 1);
<span id="line1438"></span>          this.layersBox.children[i].remove();
<span id="line1439"></span>          if(this.activeLayer == layer) {
<span id="line1440"></span>            this.setActiveLayer(this.layers[0].id);
<span id="line1441"></span>          }
<span id="line1442"></span>          this.regenerateWorld();
<span id="line1443"></span>          document.getElementById("layers").setAttribute("data-count", String(this.layers.length));
<span id="line1444"></span>          break;
<span id="line1445"></span>        }
<span id="line1446"></span>      }
<span id="line1447"></span>    }
<span id="line1448"></span>  }
<span id="line1449"></span>
<span id="line1450"></span>  updateLayerOrder() {
<span id="line1451"></span>    let updated = [];
<span id="line1452"></span>    for(let i = 0; i </span><span>&lt; </span><span>this.layersBox.children.length; i++) {
<span id="line1453"></span>      let el = this.layersBox.children[i];
<span id="line1454"></span>      if(el.hasAttribute("data-id")) {
<span id="line1455"></span>        let id = Number(el.getAttribute("data-id"));
<span id="line1456"></span>        updated.push(this.getLayerById(id));
<span id="line1457"></span>      }
<span id="line1458"></span>    }
<span id="line1459"></span>    this.layers = updated;
<span id="line1460"></span>    this.regenerateWorld();
<span id="line1461"></span>  }
<span id="line1462"></span>
<span id="line1463"></span>  eventImportCSS(e) {
<span id="line1464"></span>    let css = document.getElementById("pixelart-css-code").value;
<span id="line1465"></span>    let errors = {};
<span id="line1466"></span>    let sprites = this.css.getSpritesFromCSS(css, errors);
<span id="line1467"></span>
<span id="line1468"></span>    // Error handling
<span id="line1469"></span>    let ul = document.querySelector("#import-errors ul");
<span id="line1470"></span>    ul.innerHTML = "";
<span id="line1471"></span>    let hasErrors = false;
<span id="line1472"></span>    for( let err in errors) {
<span id="line1473"></span>      hasErrors = true;
<span id="line1474"></span>      let selector = err;
<span id="line1475"></span>      let list = errors[err];
<span id="line1476"></span>      list.forEach( item =&gt; {
<span id="line1477"></span>        let li = document.createElement("li");
<span id="line1478"></span>        li.innerHTML = selector + ": " + item;
<span id="line1479"></span>        ul.appendChild(li);
<span id="line1480"></span>      });
<span id="line1481"></span>    }
<span id="line1482"></span>
<span id="line1483"></span>    if(hasErrors) {
<span id="line1484"></span>      document.getElementById("import-errors").style.display = "";
<span id="line1485"></span>    } else {
<span id="line1486"></span>      document.getElementById("import-modal").style.display = "none";
<span id="line1487"></span>      sprites.forEach(sprite =&gt; {
<span id="line1488"></span>        this.library.addSprite(sprite);
<span id="line1489"></span>        this.world.addSpriteDefinition(sprite);
<span id="line1490"></span>      });
<span id="line1491"></span>
<span id="line1492"></span>    }
<span id="line1493"></span>
<span id="line1494"></span>  }
<span id="line1495"></span>
<span id="line1496"></span>  eventAllowDrop(e) {
<span id="line1497"></span>    e.preventDefault();
<span id="line1498"></span>    e.stopPropagation();
<span id="line1499"></span>  }
<span id="line1500"></span>
<span id="line1501"></span>  eventDragEnter(e) {
<span id="line1502"></span>    e.currentTarget.classList.add("show-drop");
<span id="line1503"></span>  }
<span id="line1504"></span>
<span id="line1505"></span>  eventDragExit(e) {
<span id="line1506"></span>    e.currentTarget.classList.remove("show-drop");
<span id="line1507"></span>  }
<span id="line1508"></span>
<span id="line1509"></span>  eventLayerDrag(e) {
<span id="line1510"></span>     e.dataTransfer.setData("text", e.currentTarget.getAttribute("data-id"));
<span id="line1511"></span>  }
<span id="line1512"></span>
<span id="line1513"></span>  eventLayerDrop(e) {
<span id="line1514"></span>    e.preventDefault();
<span id="line1515"></span>    let id = e.dataTransfer.getData("text");
<span id="line1516"></span>    let element = document.querySelector(".layer[data-id='" + id + "']");
<span id="line1517"></span>    e.currentTarget.parentNode.insertBefore(element, e.currentTarget);
<span id="line1518"></span>    e.currentTarget.classList.remove("show-drop");
<span id="line1519"></span>    this.updateLayerOrder();
<span id="line1520"></span>  }
<span id="line1521"></span>
<span id="line1522"></span>  eventLayerNameKey(e) {
<span id="line1523"></span>    let input = e.currentTarget;
<span id="line1524"></span>    let id = Number(input.getAttribute("data-id"));
<span id="line1525"></span>    if(e.key == "Enter") {
<span id="line1526"></span>      this.renameLayer(id, input.value.trim());
<span id="line1527"></span>      input.parentNode.classList.remove("edit");
<span id="line1528"></span>    } else if(e.key == "Escape") {
<span id="line1529"></span>      let layer = this.getLayerById(id);
<span id="line1530"></span>      input.value = layer.name;
<span id="line1531"></span>      input.parentNode.classList.remove("edit");
<span id="line1532"></span>    }
<span id="line1533"></span>  }
<span id="line1534"></span>
<span id="line1535"></span>  eventCancelLayerName(e) {
<span id="line1536"></span>    let id = Number(e.currentTarget.getAttribute("data-id"));
<span id="line1537"></span>    let layer = this.getLayerById(id);
<span id="line1538"></span>    e.currentTarget.value = layer.name;
<span id="line1539"></span>    e.currentTarget.parentNode.classList.remove("edit");
<span id="line1540"></span>  }
<span id="line1541"></span>
<span id="line1542"></span>  eventSelectLayer(e) {
<span id="line1543"></span>    let id = Number(e.currentTarget.getAttribute("data-id"));
<span id="line1544"></span>    this.setActiveLayer(id);
<span id="line1545"></span>  }
<span id="line1546"></span>
<span id="line1547"></span>  eventDeleteLayer(e) {
<span id="line1548"></span>    let id = Number(e.currentTarget.getAttribute("data-id"));
<span id="line1549"></span>    this.deleteLayer(id);
<span id="line1550"></span>  }
<span id="line1551"></span>
<span id="line1552"></span>  eventRenameLayer(e) {
<span id="line1553"></span>    let parent = e.currentTarget.parentNode;
<span id="line1554"></span>    parent.classList.add("edit");
<span id="line1555"></span>    parent.querySelector(".field").focus();
<span id="line1556"></span>  }
<span id="line1557"></span>
<span id="line1558"></span>  eventToggleGrid(e) {
<span id="line1559"></span>    let world = document.getElementById("world-area");
<span id="line1560"></span>    if(e.currentTarget.checked) {
<span id="line1561"></span>      world.classList.add("grid");
<span id="line1562"></span>    } else {
<span id="line1563"></span>      world.classList.remove("grid");
<span id="line1564"></span>    }
<span id="line1565"></span>  }
<span id="line1566"></span>
<span id="line1567"></span>  eventPixelSize(e) {
<span id="line1568"></span>    let size = parseInt(e.currentTarget.value);
<span id="line1569"></span>    if(size &gt; 0) {
<span id="line1570"></span>      this.pixelSize = size;
<span id="line1571"></span>      let world = document.getElementById("world-area");
<span id="line1572"></span>      world.style.backgroundSize = String(size) + "px " + String(size) + "px";
<span id="line1573"></span>      this.world.regenerate(this.layers);
<span id="line1574"></span>    }
<span id="line1575"></span>  }
<span id="line1576"></span>  
<span id="line1577"></span>  eventExport(e) {
<span id="line1578"></span>    let data = this.world.getHTML();
<span id="line1579"></span>
<span id="line1580"></span>    let a = document.createElement("a");
<span id="line1581"></span>    a.href = "data:text/plain;charset=utf-8," + encodeURIComponent(data);
<span id="line1582"></span>    a.rel = "noopener";
<span id="line1583"></span>    a.download = "pixel-art.html";
<span id="line1584"></span>    data = null;
<span id="line1585"></span>    setTimeout(() =&gt; a.dispatchEvent(new MouseEvent('click')), 0);
<span id="line1586"></span>  }
<span id="line1587"></span>
<span id="line1588"></span>}
<span id="line1589"></span>
<span id="line1590"></span>let editor = new WorldEditor();
<span id="line1591"></span>editor.init();
<span id="line1592"></span>
<span id="line1593"></span>
<span id="line1594"></span></span><span>&lt;/<span class="end-tag">script</span>&gt;</span><span>
<span id="line1595"></span></span><span>&lt;/<span class="end-tag">body</span>&gt;</span><span>
<span id="line1596"></span></span><span>&lt;/<span class="end-tag">html</span>&gt;</span><span></span></pre></body></html>